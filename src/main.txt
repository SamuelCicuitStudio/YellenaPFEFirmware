#include <WiFi.h>
#include <ESPAsyncWebServer.h>

// Replace with your network credentials
const char* ssid = "YOUR_SSID";
const char* password = "YOUR_PASSWORD";

// Create an AsyncWebServer object on port 80
AsyncWebServer server(80);

// Utility function to handle motor movement
void handleMotorMovement(String axis, String direction, int speed) {
    Serial.print("Axis: ");
    Serial.print(axis);
    Serial.print(", Direction: ");
    Serial.print(direction);
    Serial.print(", Speed: ");
    Serial.println(speed);
}

// Utility function to handle joystick movements
void handleJoystickMovement(String axis, int x, int y) {
    Serial.print("Joystick Axis: ");
    Serial.print(axis);
    Serial.print(", X: ");
    Serial.print(x);
    Serial.print(", Y: ");
    Serial.println(y);
}

void setup() {
    // Start serial communication
    Serial.begin(115200);

    // Connect to Wi-Fi
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.print(".");
    }
    Serial.println("\nConnected to Wi-Fi");
    Serial.print("IP Address: ");
    Serial.println(WiFi.localIP());

    // Handle root URL
    server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
        request->send(200, "text/html", "Stepper Motor Control");
    });

    // Handle X-Axis motor movement
    server.on("/move", HTTP_GET, [](AsyncWebServerRequest *request){
        String axis;
        String direction;
        int speed = 0;

        if (request->hasParam("axis")) {
            axis = request->getParam("axis")->value();
        }
        if (request->hasParam("direction")) {
            direction = request->getParam("direction")->value();
        }
        if (request->hasParam("speed")) {
            speed = request->getParam("speed")->value().toInt();
        }

        Serial.print("Move Request: Axis = ");
        Serial.print(axis);
        Serial.print(", Direction = ");
        Serial.print(direction);
        Serial.print(", Speed = ");
        Serial.println(speed);

        handleMotorMovement(axis, direction, speed);

        request->send(200, "text/plain", "Move Command Received");
    });

    // Handle Joystick XY movement
    server.on("/joystickXY", HTTP_GET, [](AsyncWebServerRequest *request){
        int x = 0;
        int y = 0;

        if (request->hasParam("x")) {
            x = request->getParam("x")->value().toInt();
        }
        if (request->hasParam("y")) {
            y = request->getParam("y")->value().toInt();
        }

        Serial.print("Joystick XY Movement: X = ");
        Serial.print(x);
        Serial.print(", Y = ");
        Serial.println(y);

        handleJoystickMovement("XY", x, y);

        request->send(200, "text/plain", "Joystick XY Command Received");
    });

    // Handle Joystick Z movement
    server.on("/joystickZ", HTTP_GET, [](AsyncWebServerRequest *request){
        int y = 0;

        if (request->hasParam("y")) {
            y = request->getParam("y")->value().toInt();
        }

        Serial.print("Joystick Z Movement: Y = ");
        Serial.println(y);

        handleJoystickMovement("Z", 0, y);

        request->send(200, "text/plain", "Joystick Z Command Received");
    });

    // Handle Emergency Stop
    server.on("/emergencyStop", HTTP_GET, [](AsyncWebServerRequest *request){
        Serial.println("Emergency Stop Activated");
        request->send(200, "text/plain", "Emergency Stop Activated");
    });

    // Start server
    server.begin();
}

void loop() {
    // Nothing needed here for this example
}
